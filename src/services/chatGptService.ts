"use client"

// Service pour g√©rer les appels √† l'API ChatGPT
import { openai } from './openaiConfig';
import { enrichContextWithComponents } from './ragService';
import { validateAndFixJsonStructure } from './jsonValidationService';
import { getUserState, updateUserState, initUserSession } from './userStateService';

type ChatGptResponse = {
  components: Array<{
    type: string;
    props: Record<string, any>;
  }>;
  userState?: Record<string, any>; // √âtat utilisateur mis √† jour par l'IA
};

type ChatGptRequestOptions = {
  transcript: string;
  context?: Record<string, any>;
  systemPrompt?: string;
};

type Message = {
  role: "user" | "assistant" | "system";
  content: string;
};

// Note: L'instance OpenAI est maintenant import√©e depuis openaiConfig.ts


// Prompt par d√©faut qui explique √† ChatGPT comment g√©n√©rer les composants
const DEFAULT_SYSTEM_PROMPT = `
Tu es un assistant sp√©cialis√© dans la g√©n√©ration de composants UI p√©dagogiques et interactifs √† partir d'une intention vocale.

Tu as √©galement acc√®s √† un √©tat utilisateur (userState) qui contient des informations sur le profil de l'utilisateur, ses pr√©f√©rences, son historique et son parcours d'apprentissage. Tu dois utiliser ces informations pour personnaliser ta r√©ponse et mettre √† jour cet √©tat en fonction de la conversation.

üß† Gestion du parcours d'apprentissage :
Tu dois cr√©er et g√©rer un parcours d'apprentissage coh√©rent pour l'utilisateur. Ce parcours est structur√© comme suit :
- Un sujet principal (topic)
- Une s√©rie d'√©tapes progressives (steps)
- Un index indiquant l'√©tape actuelle (currentStepIndex)

Lors des premi√®res interactions :
1. Identifie les centres d'int√©r√™t et le niveau de l'utilisateur
2. Propose un parcours d'apprentissage adapt√© avec 3 √† 7 √©tapes progressives
3. D√©finis chaque √©tape avec un titre, une description, des objectifs et une difficult√©

Lors des interactions suivantes :
1. V√©rifie o√π en est l'utilisateur dans son parcours
2. Pr√©sente le contenu correspondant √† l'√©tape actuelle
3. Avance l'index (currentStepIndex) lorsqu'une √©tape est compl√©t√©e
4. Adapte le parcours si n√©cessaire en fonction des nouvelles informations

üéØ Objectif : Cr√©er une **interface moderne**, **structur√©e en plusieurs cartes √©l√©gantes**, et **visuellement immersive**. Chaque segment doit contenir une id√©e, il doit y'avoir plusieurs segments. PAS UNE SEULE CARD MAIS PLUSIEURS CARDS.

üß± Structure attendue :
1. **Carte d'introduction** (FloatingCard)
   - Utilise un FloatingTitle avec un ton engageant et un FloatingText pour introduire simplement le sujet.
   - Ajoute des d√©grad√©s subtils avec "bg-gradient-to-br from-[couleur1] to-[couleur2]" dans className.
   - Utilise des ombres douces avec "shadow-lg hover:shadow-xl transition-all duration-300".

2. **Cartes de contenu** : une carte = un concept.
   - Pr√©sente les infos de mani√®re visuelle et ludique (listes, √©quations anim√©es, visualisations‚Ä¶).
   - Limite le texte par carte, et privil√©gie l'interaction ou la mise en forme.
   - Utilise des effets de survol avec "hover:scale-[1.02] transition-transform".
   - Ajoute des bordures arrondies avec "rounded-xl overflow-hidden".

3. **Activit√© interactive (jeu ou quiz)** : toujours dans une **carte d√©di√©e**.
   - Utilise 'CustomMathGame' si tu veux cr√©er un jeu interactif.
   - Ajoute des animations subtiles avec "animate-pulse" ou "animate-bounce" pour les √©l√©ments interactifs.

4. **Conclusion ou transition** : texte ou question pour conclure.
   - Utilise un style distinct avec des accents visuels pour marquer la fin.

üé® Design moderne :
- Utilise des d√©grad√©s subtils plut√¥t que des couleurs plates ("bg-gradient-to-br").
- Ajoute des effets de profondeur avec des ombres ("shadow-md", "shadow-lg").
- Utilise des transitions fluides ("transition-all duration-300").
- Pr√©f√®re des bordures arrondies ("rounded-xl", "rounded-2xl").
- Incorpore des micro-interactions (effets au survol, animations subtiles).

üì± Accessibilit√© et lisibilit√© :
- Utilise des couleurs harmonieuses et contrast√©es (palettes modernes).
- Utilise une taille de texte base ou lg avec un espacement ad√©quat ("leading-relaxed").
- Ajoute des espacements g√©n√©reux entre les √©l√©ments ("space-y-4", "gap-6").

üñºÔ∏è Images (FloatingImage) :
- Utilise SI √ßa aide √† la compr√©hension des images pour illustrer les concepts.
- Applique des effets modernes aux images ("rounded-lg overflow-hidden shadow-md").
- Ajoute des transitions au survol ("hover:opacity-90 transition-opacity").
Utilisation: 
      {
        type: "FloatingImage",
        props: {
          searchQuery: "math√©matiques",
          className: "rounded-lg shadow-md hover:shadow-lg transition-all duration-300"
        }
      }
Tu dois analyser la transcription vocale et g√©n√©rer une r√©ponse JSON avec les composants √† afficher.
Demandes toi ce que l'utilisateur veut voir et comprendre et r√©ponds en plusieurs groupe de components distinct √† la racine de components, pas trop surcharger en hi√©rarchie les groupes et donc cr√©er un nouveau groupe √† la racine.

Tu dois retourner une r√©ponse au format JSON avec la structure suivante:
{
  "userState": {
    "profile": {
      "name": "string", // Nom de l'utilisateur (si mentionn√©)
      "age": "number | null", // √Çge de l'utilisateur (si mentionn√©)
      "educationLevel": "primaire | coll√®ge | lyc√©e | sup√©rieur | null", // Niveau scolaire
      "mood": "curieux | concentr√© | confus | enthousiaste | fatigu√© | null" // Humeur actuelle
    },
    "preferences": {
      "contentType": "illustr√© | textuel | interactif | mixte", // Type de contenu pr√©f√©r√©
      "detailLevel": "simplifi√© | standard | d√©taill√©", // Niveau de d√©tail souhait√©
      "learningStyle": "visuel | auditif | kinesth√©sique | mixte", // Style d'apprentissage
      "examples": "boolean", // Pr√©f√©rence pour les exemples
      "quizzes": "boolean" // Pr√©f√©rence pour les quiz
    },
    "learningPath": {
      "defined": "boolean", // Si un parcours a √©t√© d√©fini
      "currentStepIndex": "number", // Index de l'√©tape actuelle (commence √† 0)
      "topic": "string", // Sujet principal du parcours
      "steps": [ // √âtapes du parcours d'apprentissage
        {
          "title": "string", // Titre de l'√©tape
          "description": "string", // Description d√©taill√©e
          "objectives": ["string"], // Objectifs d'apprentissage
          "difficulty": "d√©butant | interm√©diaire | avanc√©", // Niveau de difficult√©
          "estimatedDuration": "number", // Dur√©e estim√©e en minutes
          "completed": "boolean", // Si l'√©tape a √©t√© compl√©t√©e
          "resources": ["string"] // Ressources suppl√©mentaires (optionnel)
        }
      ]
    },
    "topics": ["string"], // Sujets abord√©s dans cette conversation
    "stats": {
      "totalInteractions": "number" // Nombre total d'interactions
    }
  },
  "components": [
    {
      "type": "FloatingCard",
      "props": {
        "color": "blue",
        "className": "w-full max-w-md mx-auto bg-gradient-to-br from-blue-50 to-indigo-100 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 mb-6"
      },
      "children": [
        {
          "type": "FloatingText",
          "props": {
            "color": "indigo",
            "size": "base",
            "className": "leading-relaxed",
            "children": "Contenu du texte"
          }
        },
        {
          "type": "CustomMathGame",
          "props": {
            "config": {
              "title": "Calculs de surface",
              "description": "Calcule la surface d'un rectangle",
              "problems": [
                {
                  "question": "Quelle est la surface d'un rectangle de 5 cm de largeur et 3 cm de longueur?",
                  "options": ["15 cm¬≤", "20 cm¬≤", "25 cm¬≤", "30 cm¬≤"],
                  "correctAnswer": "20 cm¬≤",
                  "explanation": "La surface d'un rectangle est calcul√©e en multipliant la largeur par la longueur. 5 √ó 3 = 15 cm¬≤"
                },
                {
                  "question": "Quelle est la surface d'un rectangle de 4 cm de largeur et 6 cm de longueur?",
                  "options": ["24 cm¬≤", "28 cm¬≤", "32 cm¬≤", "36 cm¬≤"],
                  "correctAnswer": "24 cm¬≤",
                  "explanation": "La surface d'un rectangle est calcul√©e en multipliant la largeur par la longueur. 4 √ó 6 = 24 cm¬≤"
                }
            }
        }
      ]
    },
    {
      "type": "FloatingCard",
      "props": {
        "color": "purple",
        "className": "w-full max-w-md mx-auto bg-gradient-to-br from-purple-50 to-pink-100 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-[1.02] mb-6"
      },
      "children": [...]
    }
  ]
}
Tu as acc√®s √† l'historique de la conversation, soit coh√©rent et fournit toujours un ui complexe et coh√©rent.
Au final il faut retourner un UI complexe avec plusieurs cards et de la diversit√©. Pas seulement une card avec des children mais plusieurs cards avec plusieurs children.

S√âPARE LE CONTENU EN PLUSIEURS CARDS AVEC DES STYLES MODERNES ET √âL√âGANTS.
`;

/**
 * Appelle l'API ChatGPT pour g√©n√©rer des composants UI bas√©s sur une transcription vocale
 * et utilise l'historique de conversation pour maintenir le contexte
 */

export async function generateComponentsFromIntent(
  options: ChatGptRequestOptions
): Promise<ChatGptResponse> {
  const { transcript, context = {}, systemPrompt = DEFAULT_SYSTEM_PROMPT } = options;
  
  // R√©cup√©rer l'√©tat utilisateur actuel
  const currentUserState = getUserState();
  
  // Initialiser une session si c'est une nouvelle visite
  if (currentUserState.stats.sessionsCount === 0) {
    initUserSession();
  }
  
  try {
    // Enrichir le contexte avec les informations des composants pertinents
    const componentsContext = await enrichContextWithComponents(transcript);
    const enrichedContext = {
      ...context,
      availableComponents: componentsContext,
      userState: currentUserState // Ajouter l'√©tat utilisateur au contexte
    };
    
    // Extraire l'historique de conversation s'il existe dans le contexte
    const conversationHistory = enrichedContext.conversationHistory || [];
    
    // Pr√©parer le message syst√®me pour ChatGPT avec le contexte enrichi
    const systemMessage = {
      role: "system",
      content: `${systemPrompt}

      Contexte des composants disponibles:
      ${JSON.stringify(enrichedContext.availableComponents, null, 2)}
      
      √âtat utilisateur actuel:
      ${JSON.stringify(enrichedContext.userState, null, 2)}
      
      Tu dois analyser cet √©tat utilisateur et le mettre √† jour en fonction de la conversation.
      Si c'est une premi√®re interaction (sessionsCount <= 1), essaie de recueillir des informations sur l'utilisateur.
      Adapte ton contenu en fonction des pr√©f√©rences de l'utilisateur (niveau de d√©tail, style d'apprentissage, etc.).
      
      Instructions pour le parcours d'apprentissage :
      1. Si le parcours n'est pas encore d√©fini (learningPath.defined = false) :
         - Identifie les centres d'int√©r√™t de l'utilisateur
         - Cr√©e un parcours d'apprentissage adapt√© avec 3 √† 7 √©tapes progressives
         - D√©finis chaque √©tape avec un titre, une description, des objectifs et une difficult√©
         - Mets √† jour learningPath.defined = true et learningPath.currentStepIndex = 0
      
      2. Si le parcours est d√©j√† d√©fini (learningPath.defined = true) :
         - Pr√©sente le contenu correspondant √† l'√©tape actuelle (learningPath.steps[currentStepIndex])
         - Si l'utilisateur a termin√© l'√©tape actuelle, mets √† jour learningPath.steps[currentStepIndex].completed = true
           et incr√©mente learningPath.currentStepIndex
         - Adapte le parcours si n√©cessaire en fonction des nouvelles informations ou demandes de l'utilisateur
      
      Retourne l'√©tat utilisateur mis √† jour dans ta r√©ponse JSON sous la cl√© "userState".
      `
    };
    
    // Construire les messages √† partir de l'historique de conversation
    const historyMessages = conversationHistory.map(msg => ({
      role: msg.role,
      content: msg.content
    }));
    
    // Ajouter le message utilisateur actuel
    const userMessage = {
      role: "user",
      content: `Transcription: "${transcript}"
      G√©n√®re les composants UI appropri√©s bas√©s sur cette transcription et notre conversation pr√©c√©dente.
      
      N'oublie pas d'analyser et de mettre √† jour l'√©tat utilisateur en fonction de cette interaction.
      
      Pour le parcours d'apprentissage :
      - Si c'est une premi√®re interaction, identifie les centres d'int√©r√™t et cr√©e un parcours adapt√©
      - Si un parcours existe d√©j√†, pr√©sente le contenu de l'√©tape actuelle et avance si n√©cessaire
      - Assure-toi que chaque √©tape du parcours est coh√©rente avec les pr√©c√©dentes
      - Adapte le niveau de difficult√© en fonction des r√©ponses de l'utilisateur`
    };
    
    // Assembler tous les messages dans le bon ordre: syst√®me, historique, utilisateur actuel
    const messages = [
      systemMessage,
      ...historyMessages,
      userMessage
    ];
    
    // Limiter la taille de l'historique si n√©cessaire pour √©viter de d√©passer les limites de tokens
    if (messages.length > 10) {
      // Garder le message syst√®me, puis les messages les plus r√©cents
      const systemMsg = messages[0];
      const recentMessages = messages.slice(-9); // Garder les 9 derniers messages
      messages.length = 0; // Vider le tableau
      messages.push(systemMsg, ...recentMessages); // Reconstruire avec syst√®me + r√©cents
    }

    // Appeler l'API ChatGPT avec la biblioth√®que OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4.1-nano", // ou un autre mod√®le selon les besoins
      messages: messages as any, // Type casting pour √©viter les erreurs de type
      temperature: 0.7,
      max_tokens: 1000,
    });

    // Log de la r√©ponse compl√®te de l'API pour le d√©bogage
    console.log("R√©ponse compl√®te de l'API OpenAI:", JSON.stringify(completion, null, 2));

    const content = completion.choices[0]?.message?.content;

    if (!content) {
      console.error("Erreur: R√©ponse vide de ChatGPT");
      throw new Error("R√©ponse vide de ChatGPT");
    }

    console.log("Contenu de la r√©ponse:", content);

    // Tenter d'extraire le JSON de la r√©ponse
    let jsonData;
    
    try {
      // Essayer d'abord d'extraire avec regex
      const jsonMatch = content.match(/\{[\s\S]*\}/); 
      if (jsonMatch) {
        console.log("JSON extrait:", jsonMatch[0]);
        jsonData = JSON.parse(jsonMatch[0]);
      } else {
        // Si l'extraction √©choue, essayer de parser directement le contenu
        console.log("Tentative de parsing direct du contenu");
        jsonData = JSON.parse(content);
      }
    } catch (parseError) {
      console.error("Erreur lors du parsing JSON:", parseError);
      
      // Importer le service de correction JSON
      const { correctJsonWithChatGpt } = await import('./jsonCorrectionService');
      
      // Utiliser ChatGPT pour corriger le JSON mal format√©
      console.log("Tentative de correction du JSON avec ChatGPT");
      return await correctJsonWithChatGpt({
        jsonString: content,
        expectedStructure: `La structure attendue est un objet avec une propri√©t√© 'components' qui est un tableau de composants UI.
        Chaque composant doit avoir une propri√©t√© 'type' (cha√Æne) et une propri√©t√© 'props' (objet).
        Les composants peuvent optionnellement avoir une propri√©t√© 'children' qui est un tableau d'autres composants.
        L'objet peut aussi contenir une propri√©t√© optionnelle 'userState' qui est un objet contenant l'√©tat utilisateur mis √† jour.`
      });
    }

    console.log("Donn√©es JSON pars√©es:", jsonData);
    
    // Valider et corriger la structure JSON avant de la retourner
    const validatedData = validateAndFixJsonStructure(jsonData);
    console.log("Donn√©es des composants valid√©es et corrig√©es:", validatedData);
    
    // Mettre √† jour l'√©tat utilisateur si pr√©sent dans la r√©ponse
    if (validatedData.userState) {
      updateUserState(validatedData.userState);
      console.log("√âtat utilisateur mis √† jour:", validatedData.userState);
    }
    
    return validatedData;
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration des composants:", error);
    // Retourner un message d'erreur sous forme de composant
    return {
      components: [
        {
          type: "FloatingCard",
          props: {
            color: "pink",
            className: "w-full max-w-md mx-auto bg-gradient-to-br from-pink-50 to-red-100 rounded-xl shadow-lg p-6",
          },
          children: [
            {
              type: "FloatingTitle",
              props: {
                text: "Erreur",
                level: 1,
                color: "pink",
              },
            },
            {
              type: "FloatingText",
              props: {
                color: "pink",
                size: "base",
                children: `D√©sol√©, je n'ai pas pu traiter votre demande: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
              },
            },
          ],
        },
      ],
    };
  }
}